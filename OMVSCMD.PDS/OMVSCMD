  /* --------------------  rexx procedure  -------------------- *
  * Name:      OMVSCMD                                         *
  *                                                            *
  * Function:  Issue a OMVS command for the passed option      *
  *            or prompt for a command.  Then display the      *
  *            results in ISPF Edit or Browse.                 *
  *                                                            *
  *            If no command is provided then a popup panel    *
  *            appears to prompt for the OMVS command.         *
  *                                                            *
  * Syntax:    %OMVSCMD command                                *
  *                                                            *
  *            optional 1st parm of -E to edit the results     *
  *                                                            *
  * Dependencies:  none                                        *
  *                                                            *
  * Usage:     Best used when added to the site ISPF           *
  *            command table:                                  *
  *                                                            *
  *            Verb:   ocmd                                    *
  *            T:      0                                       *
  *            Action: select cmd(%OMVSCMD &zparm)             *
  *                                                            *
  *            Then the user can enter:  ocmd xxx              *
  *                                                            *
  * Author:    Lionel B. Dyck                                  *
  *                                                            *
  * History:                                                   *
  *            09/26/24 - Redo to clean up and improve         *
  *                     - remove STEMEDIT requirement          *
  *            07/26/16 - Add -E option                        *
  *            07/13/16 - Enabled su support (if the user can  *
  *            07/13/16 - Converted from OMVSMAN               *
  *            07/08/16 - Handle null records from man         *
  *            07/08/16 - Creation                             *
  *                                                            *
  * ---------------------------------------------------------- */

  /* ----------------------- *
  * Get the passed omvscmd *
  * ----------------------- */
  parse arg omvscmd

  /* ------------------------------------ *
  * Translate the omvscmd to lower case *
  * ------------------------------------ */
  omvscmd = translate(omvscmd,"abcdefghijklmnopqrstuvwxyz", ,
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ")

  /* ----------------------------------- *
  * Test for a omvscmd and exit if none *
  * ----------------------------------- */
  if strip(omvscmd) = '' then do
    Address ISPExec
    rc = loadispf()
    do forever
      "Addpop"
      "Display Panel(OMVSCMD)"
      if rc > 4 then exit
      "Rempop"
      call do_it
    end
  end

do_it:
  /* ------------ *
  * check for -E *
  * ------------ */
  if left(translate(omvscmd),2) = '-E' then do
    omvscmd = substr(omvscmd,3)
    viewopt = 'Edit'
  end
  else viewopt = 'BROWSE'

  /* --------------------------------- *
  * Test for su before the command(s) *
  * --------------------------------- */
  su = ''
  parse value omvscmd with su';'cmd
  if word(su,1) = 'su' then do
    address syscall 'geteuid'
    myeuid=retval
    Address syscall "seteuid 0"
  end
  else do
    cmd = omvscmd
    su = ''
  end

  /* ---------------------------- *
  | Get the users Home directory |
  * ---------------------------- */
  address syscall 'getpwnam' sysvar('sysuid') 'h.'
  /* put into the bpxwunix environment variable */
  env.1 = 'HOME='h.4
  env.0 = 1
  /* define the login option of bpxwunix */
  login = 1
  /* -------------------------------------------- *
  * Issue the command with the omvscmd parameter *
  * -------------------------------------------- */
  rc = bpxwunix(cmd,,stdout.,stderr.,env.,login)
  if su /= '' then do
    Address syscall "seteuid" myeuid
    rc = syscalls("OFF")
  end

  /* ------------------------------------------------------- *
  * First check the results and then fixup any zero length  *
  * records from the bpxwunix stem by making them 2 blanks. *
  * ------------------------------------------------------- */

  dd = 'O'time('s')
  sl = 0
  se = 0
  if stdout.0 > 0 then do
    do i = 1 to stdout.0
      if length(stdout.i) > sl
      then sl = length(stdout.i)
      if length(stdout.i) = 0
      then stdout.i = ' '
    end
    'alloc f('dd') space(15,15) tr unit(vio) recfm(v b) lrecl('sl+4')' ,
      'blksize(0) new'
    'execio * diskw' dd '(finis stem stdout.'
    Address ISPExec
    'lminit dataid(ddb) ddname('dd')'
    viewopt 'dataid('ddb')'
    'lmfree dataid('ddb')'
    Address TSO
    'free f('dd')'
  end
  if stderr.0 > 0 then do
    do i = 1 to stderr.0
      if length(stderr.i) > se
      then se = length(stderr.i)
      if length(stderr.i) = 0
      then stderr.i = ' '
    end
    'alloc f('dd') space(15,15) tr unit(vio) recfm(v b) lrecl('se+4')' ,
      'blksize(0) new'
    'execio * diskw' dd '(finis stem stderr.'
    Address ISPExec
    'lminit dataid(ddb) ddname('dd')'
    viewopt 'dataid('ddb')'
    'lmfree dataid('ddb')'
    Address TSO
    'free f('dd')'
  end

  Return

/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    rc = loadispf()                                 *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          Address ISPEXEC                                   *
 *          do until length(load_info) = 0                    *
 *             parse value load_info with dd libd load_info   *
 *             if left(libd,6) = "ALTLIB" then do             *
 *                if libd = "ALTLIBC" then lib = "CLIST"      *
 *                                    else lib = "EXEC"       *
 *                Address TSO,                                *
 *                  "Altlib Deact Application("lib")"         *
 *                end                                         *
 *             else "libdef" libd                             *
 *             address tso "free f("dd")"                     *
 *             end                                            *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
 LoadISPF: Procedure

 parse value "" with null kmsg kpanel kskel first returns ,
                     kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
 last_line = sourceline()
 do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
    end
 rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
 do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
    end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
 Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
 clistdd = "lc"random(999)
 execdd  = "le"random(999)
 msgdd   = "lm"random(999)
 paneldd = "lp"random(999)
 skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
 if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd 'ALTLIBC')
    end
 if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd 'ALTLIBE')
    end
 if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd 'ISPMLIB')
    end
 if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd 'ISPPLIB')
    end
 if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd 'ISPSLIB')
    end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
 do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
       if first = 1 then call add_it
       type = "Clist"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">EXEC " then do
       if first = 1 then call add_it
       type = "Exec"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,5) = ">MSG " then do
       if first = 1 then call add_it
       type = "Msg"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,7) = ">PANEL " then do
       if first = 1 then call add_it
       type = "Panel"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">SKEL " then do
       if first = 1 then call add_it
       type = "Skel"
       first = 1
       parse value record with x name
       iterate
       end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
           "LmPut dataid("clist") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Exec" then
           "LmPut dataid("exec") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Msg" then
           "LmPut dataid("msg") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Panel" then
           "LmPut dataid("panel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Skel" then
           "LmPut dataid("skel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      Otherwise nop
      end
    end
 if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
 if kclist <> null then do
    Address TSO,
    "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
    end
 if kexec <> null then do
    Address TSO,
    "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
    end
 if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
    end
 if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
    end
 if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
    end
 return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
 Add_It:
 if type = "Clist" then
    "LmmAdd dataid("clist") Member("name")"
 if type = "Exec" then
    "LmmAdd dataid("exec") Member("name")"
 if type = "Msg" then
    "LmmAdd dataid("msg") Member("name")"
 if type = "Panel" then
    "LmmAdd dataid("panel") Member("name")"
 if type = "Skel" then
    "LmmAdd dataid("skel") Member("name")"
 type = null
 return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
 Alloc_DD:
 arg dd
 Address TSO
 if pos(left(dd,2),"lc le") > 0 then
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(v b) lrecl(255) blksize(32760)"
 else
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(f b) lrecl(80) blksize(23440)"
 return
>START
>Panel OMVSCMD
)Attr Default(%+_)
/* + type(text  ) intens(low )                   information only  */
   @ type( input) intens(high) caps(off) just(left ) hilite(uscore)
   $ type(text) intens(high) color(blue) hilite(reverse)
   ^ type(output) intens(low) caps(off)  color(blue)
)Body window(72,6) expand(\\)
%-\-\-$OMVS Command Prompt%-\-\-
%Command ===>_zcmd
+
+Enter/Verify OMVS Command
%===>@omvscmd                                                        +
+
)Init
)Proc
 ver (&omvscmd,nb)
)End
>END
